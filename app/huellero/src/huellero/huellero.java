/*
 * huellero.java
 *
 * Created on May 11, 2005, 10:51 AM
 */
package huellero;

import SecuGen.FDxSDKPro.jni.*;
import clases.cHuella;
import clases.conexionAPI;
import clases.mAlumno;
import java.awt.*;
import java.awt.image.*;
import javax.swing.*;

/**
 *
 * @author Administrator
 */
public class huellero extends javax.swing.JFrame {

    //Private instance variables
    private long deviceName;
    private long devicePort;
    private JSGFPLib fplib = null;
    private long ret;
    private boolean bLEDOn;
    private byte[] regMin1 = new byte[400];
    private byte[] regMin2 = new byte[400];
    private byte[] vrfMin = new byte[400];
    private SGDeviceInfoParam deviceInfo = new SGDeviceInfoParam();
    private BufferedImage imgRegistration1;
    private BufferedImage imgRegistration2;
    private BufferedImage imgVerification;
    private boolean r1Captured = false;
    private boolean r2Captured = false;
    private boolean v1Captured = false;
    private static int MINIMUM_QUALITY = 60;       //User defined
    private static int MINIMUM_NUM_MINUTIAE = 20;  //User defined
    private static int MAXIMUM_NFIQ = 2;
    public cHuella cHuella = new cHuella();
    conexionAPI api=new conexionAPI();
    mAlumno alumno= null;
    mAlumno[] alumnos=null;
//User defined

    /**
     * Creates new form JSGD
     */
    public huellero() {

        bLEDOn = false;
        initComponents();
        disableControls();
        this.jComboBoxRegisterSecurityLevel.setSelectedIndex(4);
        this.jComboBoxVerifySecurityLevel.setSelectedIndex(4);
    }

    private void disableControls() {

        this.jButtonCaptureR1.setEnabled(false);
        this.jButtonCaptureR2.setEnabled(false);
        this.jButtonCaptureV1.setEnabled(false);
        this.jButtonRegister.setEnabled(false);
        this.jButtonVerify.setEnabled(false);

        this.jButtonInit.setEnabled(true);
    }

    private void enableControls() {

        this.jButtonCaptureR1.setEnabled(true);
        this.jButtonCaptureR2.setEnabled(true);
        this.jButtonCaptureV1.setEnabled(true);

        this.jButtonInit.setEnabled(false);
    }

    private void enableRegisterAndVerifyControls() {
        if (r1Captured && r2Captured) {
            this.jButtonRegister.setEnabled(true);
        }
        if (r1Captured && r2Captured && v1Captured) {
            this.jButtonVerify.setEnabled(true);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelStatus = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanelRegisterVerify = new javax.swing.JPanel();
        jLabelSecurityLevel = new javax.swing.JLabel();
        jLabelRegistration = new javax.swing.JLabel();
        jLabelVerification = new javax.swing.JLabel();
        jComboBoxRegisterSecurityLevel = new javax.swing.JComboBox();
        jComboBoxVerifySecurityLevel = new javax.swing.JComboBox();
        jLabelRegistrationBox = new javax.swing.JLabel();
        jLabelRegisterImage1 = new javax.swing.JLabel();
        jLabelRegisterImage2 = new javax.swing.JLabel();
        jLabelVerificationBox = new javax.swing.JLabel();
        jLabelVerifyImage = new javax.swing.JLabel();
        jButtonCaptureR1 = new javax.swing.JButton();
        jButtonCaptureV1 = new javax.swing.JButton();
        jButtonRegister = new javax.swing.JButton();
        jButtonVerify = new javax.swing.JButton();
        jButtonCaptureR2 = new javax.swing.JButton();
        jProgressBarR1 = new javax.swing.JProgressBar();
        jProgressBarR2 = new javax.swing.JProgressBar();
        jProgressBarV1 = new javax.swing.JProgressBar();
        jButtonInit = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jSliderQuality = new javax.swing.JSlider();
        jLabel3 = new javax.swing.JLabel();
        jSliderSeconds = new javax.swing.JSlider();
        jLabelSecurityLevel1 = new javax.swing.JLabel();
        txtbuscar = new javax.swing.JTextField();
        btnbuscar = new javax.swing.JButton();
        jComboBoxDeviceName = new javax.swing.JComboBox();
        jLabelDeviceName = new javax.swing.JLabel();
        jLabelSpacer1 = new javax.swing.JLabel();
        jLabelSpacer2 = new javax.swing.JLabel();

        setTitle("Asistencia UNU");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabelStatus.setText("Click Initialize Button ...");
        jLabelStatus.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        getContentPane().add(jLabelStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 470, 490, 30));

        jPanelRegisterVerify.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabelSecurityLevel.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del Alumno"));
        jPanelRegisterVerify.add(jLabelSecurityLevel, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, 350, 50));

        jLabelRegistration.setText("Registration");
        jPanelRegisterVerify.add(jLabelRegistration, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 60, -1, -1));

        jLabelVerification.setText("Verification");
        jPanelRegisterVerify.add(jLabelVerification, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 110, -1, -1));

        jComboBoxRegisterSecurityLevel.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "LOWEST", "LOWER", "LOW", "BELOW_NORMAL", "NORMAL", "ABOVE_NORMAL", "HIGH", "HIGHER", "HIGHEST" }));
        jPanelRegisterVerify.add(jComboBoxRegisterSecurityLevel, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 80, 90, -1));

        jComboBoxVerifySecurityLevel.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "LOWEST", "LOWER", "LOW", "BELOW_NORMAL", "NORMAL", "ABOVE_NORMAL", "HIGH", "HIGHER", "HIGHEST" }));
        jComboBoxVerifySecurityLevel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxVerifySecurityLevelActionPerformed(evt);
            }
        });
        jPanelRegisterVerify.add(jComboBoxVerifySecurityLevel, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 130, 90, -1));

        jLabelRegistrationBox.setBorder(javax.swing.BorderFactory.createTitledBorder("Registration"));
        jPanelRegisterVerify.add(jLabelRegistrationBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 290, 190));

        jLabelRegisterImage1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLabelRegisterImage1.setMinimumSize(new java.awt.Dimension(130, 150));
        jLabelRegisterImage1.setPreferredSize(new java.awt.Dimension(130, 150));
        jPanelRegisterVerify.add(jLabelRegisterImage1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, -1, -1));

        jLabelRegisterImage2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLabelRegisterImage2.setMinimumSize(new java.awt.Dimension(130, 150));
        jLabelRegisterImage2.setPreferredSize(new java.awt.Dimension(130, 150));
        jPanelRegisterVerify.add(jLabelRegisterImage2, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 100, -1, -1));

        jLabelVerificationBox.setBorder(javax.swing.BorderFactory.createTitledBorder("Verification"));
        jPanelRegisterVerify.add(jLabelVerificationBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 80, 150, 190));

        jLabelVerifyImage.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLabelVerifyImage.setMinimumSize(new java.awt.Dimension(130, 150));
        jLabelVerifyImage.setPreferredSize(new java.awt.Dimension(130, 150));
        jPanelRegisterVerify.add(jLabelVerifyImage, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 100, -1, -1));

        jButtonCaptureR1.setText("Captura 1");
        jButtonCaptureR1.setActionCommand("jButton1");
        jButtonCaptureR1.setMaximumSize(new java.awt.Dimension(130, 30));
        jButtonCaptureR1.setMinimumSize(new java.awt.Dimension(130, 30));
        jButtonCaptureR1.setPreferredSize(new java.awt.Dimension(130, 30));
        jButtonCaptureR1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCaptureR1ActionPerformed(evt);
            }
        });
        jPanelRegisterVerify.add(jButtonCaptureR1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 280, 130, 30));

        jButtonCaptureV1.setText("Captura Verificar");
        jButtonCaptureV1.setActionCommand("jButton1");
        jButtonCaptureV1.setMaximumSize(new java.awt.Dimension(130, 30));
        jButtonCaptureV1.setMinimumSize(new java.awt.Dimension(130, 30));
        jButtonCaptureV1.setPreferredSize(new java.awt.Dimension(130, 30));
        jButtonCaptureV1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCaptureV1ActionPerformed(evt);
            }
        });
        jPanelRegisterVerify.add(jButtonCaptureV1, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 280, 130, 30));

        jButtonRegister.setText("Asignar Huellas al Alumno");
        jButtonRegister.setActionCommand("jButton1");
        jButtonRegister.setMaximumSize(new java.awt.Dimension(270, 30));
        jButtonRegister.setMinimumSize(new java.awt.Dimension(270, 30));
        jButtonRegister.setPreferredSize(new java.awt.Dimension(270, 30));
        jButtonRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRegisterActionPerformed(evt);
            }
        });
        jPanelRegisterVerify.add(jButtonRegister, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 340, 270, 30));

        jButtonVerify.setText("Verficar");
        jButtonVerify.setActionCommand("jButton1");
        jButtonVerify.setMaximumSize(new java.awt.Dimension(130, 30));
        jButtonVerify.setMinimumSize(new java.awt.Dimension(130, 30));
        jButtonVerify.setPreferredSize(new java.awt.Dimension(130, 30));
        jButtonVerify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVerifyActionPerformed(evt);
            }
        });
        jPanelRegisterVerify.add(jButtonVerify, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 340, 130, 30));

        jButtonCaptureR2.setText("Captura 2");
        jButtonCaptureR2.setActionCommand("jButton1");
        jButtonCaptureR2.setMaximumSize(new java.awt.Dimension(130, 30));
        jButtonCaptureR2.setMinimumSize(new java.awt.Dimension(130, 30));
        jButtonCaptureR2.setPreferredSize(new java.awt.Dimension(130, 30));
        jButtonCaptureR2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCaptureR2ActionPerformed(evt);
            }
        });
        jPanelRegisterVerify.add(jButtonCaptureR2, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 280, 130, 30));

        jProgressBarR1.setForeground(new java.awt.Color(0, 51, 153));
        jPanelRegisterVerify.add(jProgressBarR1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 250, 130, -1));

        jProgressBarR2.setForeground(new java.awt.Color(0, 51, 153));
        jPanelRegisterVerify.add(jProgressBarR2, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 250, 130, -1));

        jProgressBarV1.setForeground(new java.awt.Color(0, 51, 153));
        jPanelRegisterVerify.add(jProgressBarV1, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 250, 130, -1));

        jButtonInit.setText("CONECTAR");
        jButtonInit.setMaximumSize(new java.awt.Dimension(100, 30));
        jButtonInit.setMinimumSize(new java.awt.Dimension(100, 30));
        jButtonInit.setName("jButtonInit"); // NOI18N
        jButtonInit.setPreferredSize(new java.awt.Dimension(100, 30));
        jButtonInit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInitActionPerformed(evt);
            }
        });
        jPanelRegisterVerify.add(jButtonInit, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 40, 100, 30));

        jLabel2.setText("Image Quality");
        jPanelRegisterVerify.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 170, -1, -1));

        jSliderQuality.setMajorTickSpacing(10);
        jSliderQuality.setMinorTickSpacing(5);
        jSliderQuality.setPaintLabels(true);
        jSliderQuality.setPaintTicks(true);
        jSliderQuality.setName(""); // NOI18N
        jSliderQuality.setOpaque(false);
        jPanelRegisterVerify.add(jSliderQuality, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 190, 220, -1));

        jLabel3.setText("Timeout (seconds)");
        jPanelRegisterVerify.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 250, -1, -1));

        jSliderSeconds.setMajorTickSpacing(1);
        jSliderSeconds.setMaximum(10);
        jSliderSeconds.setMinimum(1);
        jSliderSeconds.setPaintLabels(true);
        jSliderSeconds.setPaintTicks(true);
        jSliderSeconds.setValue(5);
        jPanelRegisterVerify.add(jSliderSeconds, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 270, 220, -1));

        jLabelSecurityLevel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Nivel de Seguridad"));
        jPanelRegisterVerify.add(jLabelSecurityLevel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 30, 150, 130));
        jPanelRegisterVerify.add(txtbuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 40, 320, -1));

        btnbuscar.setText("Buscar Alumno");
        btnbuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnbuscarActionPerformed(evt);
            }
        });
        jPanelRegisterVerify.add(btnbuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 30, -1, 30));

        jTabbedPane1.addTab("REGISTRAR Y VERIFICAR", jPanelRegisterVerify);

        getContentPane().add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 35, 810, 420));

        jComboBoxDeviceName.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "AUTO", "HU20-AP", "HU20-A", "HU10-AP", "HU10", "HUPX", "HU20", "HSDU04P", "HSDU03P", "HFDU02" }));
        jComboBoxDeviceName.setMinimumSize(new java.awt.Dimension(350, 10));
        jComboBoxDeviceName.setVerifyInputWhenFocusTarget(false);
        getContentPane().add(jComboBoxDeviceName, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 10, 350, -1));

        jLabelDeviceName.setText("Device Name");
        getContentPane().add(jLabelDeviceName, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 11, 110, -1));

        jLabelSpacer1.setText(" ");
        getContentPane().add(jLabelSpacer1, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 490, 10, -1));

        jLabelSpacer2.setText(" ");
        getContentPane().add(jLabelSpacer2, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 10, 10, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Exit the Application
     */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm

    private void jButtonCaptureR2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCaptureR2ActionPerformed
        int[] quality = new int[1];
        int[] numOfMinutiae = new int[1];
        byte[] imageBuffer1 = ((java.awt.image.DataBufferByte) imgRegistration2.getRaster().getDataBuffer()).getData();
        long iError = SGFDxErrorCode.SGFDX_ERROR_NONE;

        iError = fplib.GetImageEx(imageBuffer1, jSliderSeconds.getValue() * 1000, 0, jSliderQuality.getValue());
        fplib.GetImageQuality(deviceInfo.imageWidth, deviceInfo.imageHeight, imageBuffer1, quality);
        this.jProgressBarR2.setValue(quality[0]);
        SGFingerInfo fingerInfo = new SGFingerInfo();
        fingerInfo.FingerNumber = SGFingerPosition.SG_FINGPOS_LI;
        fingerInfo.ImageQuality = quality[0];
        fingerInfo.ImpressionType = SGImpressionType.SG_IMPTYPE_LP;
        fingerInfo.ViewNumber = 1;

        if (iError == SGFDxErrorCode.SGFDX_ERROR_NONE) {
            this.jLabelRegisterImage2.setIcon(new ImageIcon(imgRegistration2.getScaledInstance(130, 150, Image.SCALE_DEFAULT)));
            if (quality[0] < MINIMUM_QUALITY) {
                this.jLabelStatus.setText("GetImageEx() Success [" + ret + "] but image quality is [" + quality[0] + "]. Please try again");
            } else {
                this.jLabelStatus.setText("GetImageEx() Success [" + ret + "]");

                iError = fplib.CreateTemplate(fingerInfo, imageBuffer1, regMin2);

                if (iError == SGFDxErrorCode.SGFDX_ERROR_NONE) {

                    long nfiqvalue;
                    long ret2 = fplib.GetImageQuality(deviceInfo.imageWidth, deviceInfo.imageHeight, imageBuffer1, quality);
                    nfiqvalue = fplib.ComputeNFIQ(imageBuffer1, deviceInfo.imageWidth, deviceInfo.imageHeight);
                    ret2 = fplib.GetNumOfMinutiae(SGFDxTemplateFormat.TEMPLATE_FORMAT_SG400, regMin2, numOfMinutiae);
                    if ((quality[0] >= MINIMUM_QUALITY) && (nfiqvalue <= MAXIMUM_NFIQ) && (numOfMinutiae[0] >= MINIMUM_NUM_MINUTIAE)) {
                        cHuella.crearImagen(imgRegistration2, regMin2, 2);
                        this.jLabelStatus.setText("Reg. Capture 2 PASS QC. Qual[" + quality[0] + "] NFIQ[" + nfiqvalue + "] Minutiae[" + numOfMinutiae[0] + "]");
                        r2Captured = true;
                        this.enableRegisterAndVerifyControls();
                    } else {
                        this.jLabelStatus.setText("Reg. Capture 2 FAIL QC. Quality[" + quality[0] + "] NFIQ[" + nfiqvalue + "] Minutiae[" + numOfMinutiae[0] + "]");
                        this.jButtonVerify.setEnabled(false);
                        this.jButtonRegister.setEnabled(false);
                    }

                } else {
                    this.jLabelStatus.setText("CreateTemplate() Error : " + iError);
                }
            }
        } else {
            this.jLabelStatus.setText("GetImageEx() Error : " + iError);
        }

    }//GEN-LAST:event_jButtonCaptureR2ActionPerformed

    private void jButtonVerifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVerifyActionPerformed
        long iError;
        long secuLevel = (long) (this.jComboBoxVerifySecurityLevel.getSelectedIndex() + 1);
        boolean[] matched = new boolean[1];
        matched[0] = false;

        iError = fplib.MatchTemplate(regMin1, vrfMin, secuLevel, matched);
        System.out.println(regMin1.toString());

        System.out.println(vrfMin.toString());
        if (iError == SGFDxErrorCode.SGFDX_ERROR_NONE) {
            if (matched[0]) {
                this.jLabelStatus.setText("Verification Success (1st template)");
            } else {

                System.out.println(regMin2.toString());

                System.out.println(vrfMin.toString());
                iError = fplib.MatchTemplate(regMin2, vrfMin, secuLevel, matched);
                if (iError == SGFDxErrorCode.SGFDX_ERROR_NONE) {
                    if (matched[0]) {
                        this.jLabelStatus.setText("Verification Success (2nd template)");
                    } else {
                        this.jLabelStatus.setText("Verification Fail");
                    }
                } else {
                    this.jLabelStatus.setText("Verification Attempt 2 Fail - MatchTemplate() Error : " + iError);
                }

            }
        } else {
            this.jLabelStatus.setText("Verification Attempt 1 Fail - MatchTemplate() Error : " + iError);
        }
    }//GEN-LAST:event_jButtonVerifyActionPerformed

    private void jButtonRegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRegisterActionPerformed
        int[] matchScore = new int[1];
        boolean[] matched = new boolean[1];
        long iError;
        long secuLevel = (long) (this.jComboBoxRegisterSecurityLevel.getSelectedIndex() + 1);
        matched[0] = false;

        iError = fplib.MatchTemplate(regMin1, regMin2, secuLevel, matched);

        if (iError == SGFDxErrorCode.SGFDX_ERROR_NONE) {
            matchScore[0] = 0;
            iError = fplib.GetMatchingScore(regMin1, regMin2, matchScore);

            if (iError == SGFDxErrorCode.SGFDX_ERROR_NONE) {
                if (matched[0]) {
                    this.jLabelStatus.setText("Registration Success, Matching Score: " + matchScore[0]);
                } else {
                    this.jLabelStatus.setText("Registration Fail, Matching Score: " + matchScore[0]);
                }

            } else {
                this.jLabelStatus.setText("Registration Fail, GetMatchingScore() Error : " + iError);
            }
        } else {
            this.jLabelStatus.setText("Registration Fail, MatchTemplate() Error : " + iError);
        }
    }//GEN-LAST:event_jButtonRegisterActionPerformed

    private void jButtonCaptureV1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCaptureV1ActionPerformed
        int[] quality = new int[1];
        int[] numOfMinutiae = new int[1];
        byte[] imageBuffer1 = ((java.awt.image.DataBufferByte) imgVerification.getRaster().getDataBuffer()).getData();
        long iError = SGFDxErrorCode.SGFDX_ERROR_NONE;

        iError = fplib.GetImageEx(imageBuffer1, jSliderSeconds.getValue() * 1000, 0, jSliderQuality.getValue());
        fplib.GetImageQuality(deviceInfo.imageWidth, deviceInfo.imageHeight, imageBuffer1, quality);
        this.jProgressBarV1.setValue(quality[0]);
        SGFingerInfo fingerInfo = new SGFingerInfo();
        fingerInfo.FingerNumber = SGFingerPosition.SG_FINGPOS_LI;
        fingerInfo.ImageQuality = quality[0];
        fingerInfo.ImpressionType = SGImpressionType.SG_IMPTYPE_LP;
        fingerInfo.ViewNumber = 1;

        if (iError == SGFDxErrorCode.SGFDX_ERROR_NONE) {
            this.jLabelVerifyImage.setIcon(new ImageIcon(imgVerification.getScaledInstance(130, 150, Image.SCALE_DEFAULT)));
            if (quality[0] < MINIMUM_QUALITY) {
                this.jLabelStatus.setText("GetImageEx() Success [" + ret + "] but image quality is [" + quality[0] + "]. Please try again");
            } else {
                this.jLabelStatus.setText("GetImageEx() Success [" + ret + "]");

                iError = fplib.CreateTemplate(fingerInfo, imageBuffer1, vrfMin);
                if (iError == SGFDxErrorCode.SGFDX_ERROR_NONE) {
                    long nfiqvalue;
                    long ret2 = fplib.GetImageQuality(deviceInfo.imageWidth, deviceInfo.imageHeight, imageBuffer1, quality);
                    nfiqvalue = fplib.ComputeNFIQ(imageBuffer1, deviceInfo.imageWidth, deviceInfo.imageHeight);
                    ret2 = fplib.GetNumOfMinutiae(SGFDxTemplateFormat.TEMPLATE_FORMAT_SG400, vrfMin, numOfMinutiae);

                    if ((quality[0] >= MINIMUM_QUALITY) && (nfiqvalue <= MAXIMUM_NFIQ) && (numOfMinutiae[0] >= MINIMUM_NUM_MINUTIAE)) {
                        cHuella.crearImagen(imgVerification, vrfMin, 3);
                        this.jLabelStatus.setText("Verification Capture PASS QC. Quality[" + quality[0] + "] NFIQ[" + nfiqvalue + "] Minutiae[" + numOfMinutiae[0] + "]");
                        v1Captured = true;
                        this.enableRegisterAndVerifyControls();
                    } else {
                        this.jLabelStatus.setText("Verification Capture FAIL QC. Quality[" + quality[0] + "] NFIQ[" + nfiqvalue + "] Minutiae[" + numOfMinutiae[0] + "]");
                        this.jButtonVerify.setEnabled(false);
                    }
                } else {
                    this.jLabelStatus.setText("CreateTemplate() Error : " + iError);
                }
            }
        } else {
            this.jLabelStatus.setText("GetImageEx() Error : " + iError);
        }

    }//GEN-LAST:event_jButtonCaptureV1ActionPerformed

    private void jButtonCaptureR1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCaptureR1ActionPerformed
        int[] quality = new int[1];
        int[] numOfMinutiae = new int[1];
        byte[] imageBuffer1 = ((java.awt.image.DataBufferByte) imgRegistration1.getRaster().getDataBuffer()).getData();
        long iError = SGFDxErrorCode.SGFDX_ERROR_NONE;

        iError = fplib.GetImageEx(imageBuffer1, jSliderSeconds.getValue() * 1000, 0, jSliderQuality.getValue());
        fplib.GetImageQuality(deviceInfo.imageWidth, deviceInfo.imageHeight, imageBuffer1, quality);
        this.jProgressBarR1.setValue(quality[0]);
        SGFingerInfo fingerInfo = new SGFingerInfo();
        fingerInfo.FingerNumber = SGFingerPosition.SG_FINGPOS_LI;
        fingerInfo.ImageQuality = quality[0];
        fingerInfo.ImpressionType = SGImpressionType.SG_IMPTYPE_LP;
        fingerInfo.ViewNumber = 1;

        if (iError == SGFDxErrorCode.SGFDX_ERROR_NONE) {
            this.jButtonVerify.setEnabled(false);
            this.jButtonRegister.setEnabled(false);
            this.jLabelRegisterImage1.setIcon(new ImageIcon(imgRegistration1.getScaledInstance(130, 150, Image.SCALE_DEFAULT)));

            if (quality[0] < MINIMUM_QUALITY) {
                this.jLabelStatus.setText("GetImageEx() Success [" + ret + "] but image quality is [" + quality[0] + "]. Please try again");
            } else {

                this.jLabelStatus.setText("GetImageEx() Success [" + ret + "]");

                iError = fplib.CreateTemplate(fingerInfo, imageBuffer1, regMin1);
                if (iError == SGFDxErrorCode.SGFDX_ERROR_NONE) {
                    long nfiqvalue;
                    long ret2 = fplib.GetImageQuality(deviceInfo.imageWidth, deviceInfo.imageHeight, imageBuffer1, quality);
                    nfiqvalue = fplib.ComputeNFIQ(imageBuffer1, deviceInfo.imageWidth, deviceInfo.imageHeight);
                    ret2 = fplib.GetNumOfMinutiae(SGFDxTemplateFormat.TEMPLATE_FORMAT_SG400, regMin1, numOfMinutiae);

                    if ((quality[0] >= MINIMUM_QUALITY) && (nfiqvalue <= MAXIMUM_NFIQ) && (numOfMinutiae[0] >= MINIMUM_NUM_MINUTIAE)) {
                        cHuella.crearImagen(imgRegistration1, regMin1, 1);
                        this.jLabelStatus.setText("Reg. Capture 1 PASS QC. Qual[" + quality[0] + "] NFIQ[" + nfiqvalue + "] Minutiae[" + numOfMinutiae[0] + "]");
                        r1Captured = true;
                        this.enableRegisterAndVerifyControls();
                    } else {
                        this.jLabelStatus.setText("Reg. Capture 1 FAIL QC. Quality[" + quality[0] + "] NFIQ[" + nfiqvalue + "] Minutiae[" + numOfMinutiae[0] + "]");
                        this.jButtonVerify.setEnabled(false);
                        this.jButtonRegister.setEnabled(false);
                    }
                } else {
                    this.jLabelStatus.setText("CreateTemplate() Error : " + iError);
                }
            }
        } else {
            this.jLabelStatus.setText("GetImageEx() Error : " + iError);
        }

    }//GEN-LAST:event_jButtonCaptureR1ActionPerformed

    private void jButtonInitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonInitActionPerformed
        int selectedDevice = jComboBoxDeviceName.getSelectedIndex();
        //AUTO
        //FDU08 Hamster Pro 20A
        //FDU07A Hamster Pro 10AP
        //FDU07 Hamster Pro 10
        //FDU06 Hamster Pro
        //FDU05 Hamster Pro 20
        //FDU04 Hamster IV
        //FDU03 Hamster Plus
        //FDU02 Hamster III
        switch (selectedDevice) {
            case 0: //USB
            default:
                this.deviceName = SGFDxDeviceName.SG_DEV_AUTO;
                break;
            case 1: //HU20-AP
                this.deviceName = SGFDxDeviceName.SG_DEV_FDU08;
                break;
            case 2: //HU20-A
                this.deviceName = SGFDxDeviceName.SG_DEV_FDU08;
                break;
            case 3: //HU10-AP
                this.deviceName = SGFDxDeviceName.SG_DEV_FDU07A;
                break;
            case 4: //HU10
                this.deviceName = SGFDxDeviceName.SG_DEV_FDU07;
                break;
            case 5: //HUPX
                this.deviceName = SGFDxDeviceName.SG_DEV_FDU06;
                break;
            case 6: //HU20
                this.deviceName = SGFDxDeviceName.SG_DEV_FDU05;
                break;
            case 7: //HSDU04P
                this.deviceName = SGFDxDeviceName.SG_DEV_FDU04;
                break;
            case 8: //HSDU03P
                this.deviceName = SGFDxDeviceName.SG_DEV_FDU03;
                break;
            case 9: //HFDU02
                this.deviceName = SGFDxDeviceName.SG_DEV_FDU02;
                break;
        }
        if (fplib != null) {
            fplib.CloseDevice();
            fplib.Close();
            fplib = null;
        }
        fplib = new JSGFPLib();
        ret = fplib.Init(this.deviceName);
        if ((fplib != null) && (ret == SGFDxErrorCode.SGFDX_ERROR_NONE)) {
            this.jLabelStatus.setText("JSGFPLib Initialization Success");
            this.devicePort = SGPPPortAddr.AUTO_DETECT;
            
            boolean conetado = false;
            int puerto = 0;
            while (conetado == false) {
                this.devicePort = puerto;
                ret = fplib.OpenDevice(this.devicePort);
                if (ret == SGFDxErrorCode.SGFDX_ERROR_NONE) {
                    conetado=true;
                    this.jLabelStatus.setText("OpenDevice() Success [" + ret + "]");
                    ret = fplib.GetDeviceInfo(deviceInfo);
                    if (ret == SGFDxErrorCode.SGFDX_ERROR_NONE) {
                        imgRegistration1 = new BufferedImage(deviceInfo.imageWidth, deviceInfo.imageHeight, BufferedImage.TYPE_BYTE_GRAY);
                        imgRegistration2 = new BufferedImage(deviceInfo.imageWidth, deviceInfo.imageHeight, BufferedImage.TYPE_BYTE_GRAY);
                        imgVerification = new BufferedImage(deviceInfo.imageWidth, deviceInfo.imageHeight, BufferedImage.TYPE_BYTE_GRAY);
                        this.enableControls();
                    } else {
                        this.jLabelStatus.setText("GetDeviceInfo() Error [" + ret + "]");

                    }
                } else {
                    this.jLabelStatus.setText("OpenDevice() Error [" + ret + "]");
                } 
                puerto++;
            }
            }else {
            this.jLabelStatus.setText("JSGFPLib Initialization Failed");
        }
           
    }//GEN-LAST:event_jButtonInitActionPerformed

    private void jComboBoxVerifySecurityLevelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxVerifySecurityLevelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxVerifySecurityLevelActionPerformed

    private void btnbuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnbuscarActionPerformed
       String buscar= txtbuscar.getText();
         alumno = api.buscarAlumno(buscar);
        try {
             System.out.println(alumno.toString());
        } catch (Exception e) {
            System.out.println(e.getMessage());
            JOptionPane.showMessageDialog(this, "No se encontro Alumno");
        }
        
    }//GEN-LAST:event_btnbuscarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        new huellero().setVisible(true);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnbuscar;
    private javax.swing.JButton jButtonCaptureR1;
    private javax.swing.JButton jButtonCaptureR2;
    private javax.swing.JButton jButtonCaptureV1;
    private javax.swing.JButton jButtonInit;
    private javax.swing.JButton jButtonRegister;
    private javax.swing.JButton jButtonVerify;
    private javax.swing.JComboBox jComboBoxDeviceName;
    private javax.swing.JComboBox jComboBoxRegisterSecurityLevel;
    private javax.swing.JComboBox jComboBoxVerifySecurityLevel;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabelDeviceName;
    private javax.swing.JLabel jLabelRegisterImage1;
    private javax.swing.JLabel jLabelRegisterImage2;
    private javax.swing.JLabel jLabelRegistration;
    private javax.swing.JLabel jLabelRegistrationBox;
    private javax.swing.JLabel jLabelSecurityLevel;
    private javax.swing.JLabel jLabelSecurityLevel1;
    private javax.swing.JLabel jLabelSpacer1;
    private javax.swing.JLabel jLabelSpacer2;
    private javax.swing.JLabel jLabelStatus;
    private javax.swing.JLabel jLabelVerification;
    private javax.swing.JLabel jLabelVerificationBox;
    private javax.swing.JLabel jLabelVerifyImage;
    private javax.swing.JPanel jPanelRegisterVerify;
    private javax.swing.JProgressBar jProgressBarR1;
    private javax.swing.JProgressBar jProgressBarR2;
    private javax.swing.JProgressBar jProgressBarV1;
    private javax.swing.JSlider jSliderQuality;
    private javax.swing.JSlider jSliderSeconds;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField txtbuscar;
    // End of variables declaration//GEN-END:variables

}
